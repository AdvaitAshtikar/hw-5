initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_relu()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test), q1 = 10, o = 3
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 200, shuffle = TRUE),
verbose = FALSE
)
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix
fit_1_predictions <- predict(fit_1, test_matrix) %>%
argmax(2) %>%
as.integer()
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix
fit_1_predictions <- predict(fit_1, test_matrix) %>%
torch.argmax(2) %>%
as.integer()
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix
fit_1_predictions <- predict(fit_1, test_matrix) %>%
torch_argmax(2) %>%
as.integer()
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix
fit_1_predictions <- predict(fit_1, test_matrix) %>%
torch_argmax(2) %>%
as.integer()
plot_decision_boundary(NN1)
NN0 <- nn_module(
initialize = function(p, o){
self$hidden1 <- nn_linear(p, o)
},
forward = function(x){
x %>%
self$hidden1()
}
)
fit_0 <- NN0 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test, o = 3)
) %>%
set_opt_params(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1 , x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
NN0 <- nn_module(
initialize = function(p, o){
self$hidden1 <- nn_linear(p, o)
},
forward = function(x){
x %>%
self$hidden1()
}
)
fit_0 <- NN0 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test, o = 3)
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1 , x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
NN0 <- nn_module(
initialize = function(p, o){
self$hidden1 <- nn_linear(p, o)
},
forward = function(x){
x %>%
self$hidden1()
}
)
fit_0 <- NN0 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test), o = 3
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1 , x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
plot_decision_boundary(NN0)
rpart_classes <- predict(rpart_fit, newdata = dfTest, type = "class")
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
dfTrain <- df[-test_ind, ]
dfTest  <- df[test_ind, ]
overview <- function(pred_class, true_class) {
accuracy <- mean(pred_class == true_class)
error <- 1 - accuracy
true_positives <- sum(pred_class == "1" & true_class == "1")
true_negatives <- sum(pred_class == "0" & true_class == "0")
false_positives <- sum(pred_class == "1" & true_class == "0")
false_negatives <- sum(pred_class == "0" & true_class == "1")
true_positive_rate <- true_positives / (true_positives + false_negatives)
false_positive_rate <- false_positives / (true_negatives + false_positives)
return(
data.frame(
accuracy = accuracy,
error = error,
true_positive_rate = true_positive_rate,
false_positive_rate = false_positive_rate
)
)
}
glm_fit <- glm(
spam ~ .,
dfTrain %>% mutate_at("spam", factor),
family = binomial()
)
path <- "data/spambase.csv"
df <- read_csv(path) %>%
select(-contains("Unnamed")) %>%
mutate_if(is.character, as.factor) %>%
rename_all(tolower) %>%
na.omit()
df %>% head
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
dfTrain <- df[-test_ind, ]
dfTest  <- df[test_ind, ]
overview <- function(pred_class, true_class) {
accuracy <- mean(pred_class == true_class)
error <- 1 - accuracy
true_positives <- sum(pred_class == "1" & true_class == "1")
true_negatives <- sum(pred_class == "0" & true_class == "0")
false_positives <- sum(pred_class == "1" & true_class == "0")
false_negatives <- sum(pred_class == "0" & true_class == "1")
true_positive_rate <- true_positives / (true_positives + false_negatives)
false_positive_rate <- false_positives / (true_negatives + false_positives)
return(
data.frame(
accuracy = accuracy,
error = error,
true_positive_rate = true_positive_rate,
false_positive_rate = false_positive_rate
)
)
}
glm_fit <- glm(
spam ~ .,
dfTrain %>% mutate_at("spam", factor),
family = binomial()
)
glm_test <- predict(glm_fit, dfTest, output = "response")
glm_classes <- ifelse(glm_test > 0.5, 1, 0)
overview(glm_classes, dfTest$spam)
rpart_fit <- rpart(spam ~ ., dfTrain, method = "class")
rpart.plot(rpart_fit)
rpart_classes <- predict(rpart_fit, newdata = dfTest, type = "class")
overview(rpart_classes, dfTest$spam)
rpart_classes <- ifelse(predict(rpart_fit, newdata = dfTest) > 0.5, 1, 0)
overview(rpart_classes, dfTest$spam)
svm_fit <- svm(spam ~ ., dfTrain, kernel = "radial", type = "C-classification")
svm_classes <- predict(svm_fit, newdata = df_test)
path <- "data/spambase.csv"
df <- read_csv(path) %>%
select(-contains("Unnamed")) %>%
mutate_if(is.character, as.factor) %>%
rename_all(tolower) %>%
na.omit()
df %>% head
glm_fit <- glm(
spam ~ .,
dfTrain %>% mutate_at("spam", factor),
family = binomial()
)
glm_test <- predict(glm_fit, dfTest, output = "response")
glm_classes <- ifelse(glm_test > 0.5, 1, 0)
overview(glm_classes, dfTest$spam)
rpart_classes <- ifelse(predict(rpart_fit, newdata = dfTest) > 0.5, 1, 0)
overview(rpart_classes, dfTest$spam)
svm_fit <- svm(spam ~ ., dfTrain, kernel = "radial", type = "C-classification")
svm_classes <- predict(svm_fit, newdata = df_test)
svm_classes <- predict(svm_fit, newdata = dfTest)
overview(svm_classes, dfTest$spam)
svm_classes <- ifelse(predict(svm_fit, newdata = dfTest) > 0.5, 1, 0)
overview(svm_classes, dfTest$spam)
svm_classes <- predict(svm_fit, newdata = dfTest)
overview(svm_classes, dfTest$spam)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3, 1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>% self$activation() %>%
self$hidden2() %>% self$activation() %>%
self$hidden3() %>% self$activation() %>%
self$output() %>% self$sigmoid()
}
)
generate_three_spirals <- function(){
set.seed(42)
n <- 500
noise <- 0.2
t <- (1:n) / n * 2 * pi
x1 <- c(
t * (sin(t) + rnorm(n, 0, noise)),
t * (sin(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (sin(t + 4 * pi/3) + rnorm(n, 0, noise))
)
x2 <- c(
t * (cos(t) + rnorm(n, 0, noise)),
t * (cos(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (cos(t + 4 * pi/3) + rnorm(n, 0, noise))
)
y <- as.factor(
c(
rep(0, n),
rep(1, n),
rep(2, n)
)
)
return(tibble(x1=x1, x2=x2, y=y))
}
df <- generate_three_spirals()
plot(
df$x1, df$x2,
col = df$y,
pch = 20
)
grid <- expand.grid(
x1 = seq(-10, 10, length.out = 100),
x2 = seq(-10, 10, length.out = 100)
)
df_test <- as_tibble(grid)
rpart_fit <- rpart(y ~ x1 + x2, df, method = "class")
rpart_classes <- predict(rpart_fit, newdata = df_test, type = "class")
plot_decision_boundary <- function(predictions){
plot(
df_test$x1, df_test$x2,
col = predictions,
pch = 0
)
points(
df$x1, df$x2,
col = df$y,
pch = 20
)
}
plot_decision_boundary(rpart_classes)
svm_fit <- svm(y ~ x1 + x2, df, kernel = "radial", type = "C-classification")
svm_classes <- predict(svm_fit, newdata = df_test)
plot_decision_boundary(svm_classes)
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_relu()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test), q1 = 10, o = 3
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 200, shuffle = TRUE),
verbose = FALSE
)
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix
fit_1_predictions <- predict(fit_1, test_matrix) %>%
torch_argmax(2) %>%
as.integer()
plot_decision_boundary(NN1)
NN0 <- nn_module(
initialize = function(p, o){
self$hidden1 <- nn_linear(p, o)
},
forward = function(x){
x %>%
self$hidden1()
}
)
fit_0 <- NN0 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test), o = 3
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1 , x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
plot_decision_boundary(NN0)
NN3 <- nn_module(
initialize = function(p , q1, q2, o){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1., q2)
self$hidden3 <- nn_linear(q2, o)
self$activation <- n_relu()
},
forward = function(x){
x %>%
self$hidden1() %>% self$activation() %>%
self$hidden2() %>% self$activation() %>%
self$hidden3()
}
)
fit_3 <- NN3 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test), q1 = 10, q2 = 10, o = 3
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1 , x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
NN3 <- nn_module(
initialize = function(p , q1, q2, o){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, o)
self$activation <- n_relu()
},
forward = function(x){
x %>%
self$hidden1() %>% self$activation() %>%
self$hidden2() %>% self$activation() %>%
self$hidden3()
}
)
fit_3 <- NN3 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test), q1 = 10, q2 = 10, o = 3
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1 , x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
NN3 <- nn_module(
initialize = function(p , q1, q2, o){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, o)
self$activation <- nn_relu()
},
forward = function(x){
x %>%
self$hidden1() %>% self$activation() %>%
self$hidden2() %>% self$activation() %>%
self$hidden3()
}
)
fit_3 <- NN3 %>%
setup(
loss = nn_cross_entropy_loss(),
optimizer = optim_adam
) %>%
set_hparams(
p = ncol(df_test), q1 = 10, q2 = 10, o = 3
) %>%
set_opt_hparams(
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1 , x2) %>% as.matrix,
df$y %>% as.integer
),
epochs = 50,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
plot_decision_boundary(NN3)
sessionInfo()
nnet_predictions <- ifelse(predict(nnet_fit,
model.matrix(spam ~ 0 + ., data = dfTest)) > 0.5, 1, 0)
M1 <- model.matrix(spam ~ 0 + ., data = dfTrain)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p = ncol(M1), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.1
) %>%
fit(
data = list(
model.matrix(spam ~ 0 + ., data = dfTrain),
(dfTrain[["spam"]] %>% as.numeric() - 1) %>% as.matrix()
),
valid_data = list(
model.matrix(spam ~ 0 + ., data = dfTest),
(dfTest[["spam"]] %>% as.numeric() - 1) %>% as.matrix()
),
epochs = 100,
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE # Change to TRUE while tuning. But, set to FALSE before submitting
)
